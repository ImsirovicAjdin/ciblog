--- Right after the commit titled:
		"
		Configure database access so that posts get loaded from the database
		"
	... add the following sql syntax to SQL textbox on phpMyAdmin:

	INSERT INTO `posts` (`id`, `title`, `slug`, `body`, `created_at`)
	VALUES
	(
		NULL,
		'Post One',
		'post-one',
		'Lorem ipsum dolor sit consectetur adipiscing elit',
		CURRENT_TIMESTAMP
	),
	(
		NULL,
		'Post Two',
		'post-two',
		'Ne obra se bostan dok sljive ne popadaju',
		CURRENT_TIMESTAMP
	)
	
-- AFTER COMMIT ef702bd:
-- for categories, we're gonna create a new table, we're gonna call it `categories`, it's gonna have 3 fields, this is the query:

CREATE TABLE `ciblog`.`categories` (
	`id` INT NOT NULL AUTO_INCREMENT ,
	`name` VARCHAR(255) NOT NULL ,
	`created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ,
	PRIMARY KEY (`id`)
) ENGINE = InnoDB;

Now that we have this `categories` table, we need to add a field inside this `posts` table. SQL to execute:

ALTER TABLE `posts` ADD `category_id` INT NOT NULL AFTER `id`;
ALTER TABLE `posts` ADD `category_id` INT NOT NULL AFTER `id`;

If we look at `posts` now, they all have category of 0. Before we change the values, let's add a couple of categories in `categories` table:

SELECT * FROM `categories`

and then click 'Insert' tab, aka, run this SQL query:

INSERT INTO `categories` (`id`, `name`, `created_at`)
	VALUES (NULL, 'Business', CURRENT_TIMESTAMP), (NULL, 'Technology', CURRENT_TIMESTAMP);

Now we have these 2 categories, Business has the id of 1, and Technology the id of 2. So let's go back to `posts` and add categories:
 1 2 1 2 etc.

Alright, so now they have categories, so what we wanna do, on our "Create Post" page form, we want a category dropdown.

So let's go to Posts.php controller, and add code.

... (1), (2), (3), (4) ...

After adding code (1-4), ACTION: Create new post, add technology (category 2), and check if it
has updated successfully in the db table `posts`.

-- AFTER cd96617 :

In the `posts` table, let's add `post_image` after `body`:

ALTER TABLE `posts` ADD `post_image` VARCHAR(255) NOT NULL AFTER `body` ;

... So the image upload is gonna do 2 things when it uploads: 1. it's gonna get put in the folder that we specified, and then
2. the name of it is gonna get put in the database
<!-- IT MUST BE 'userfile', OTHERWISE IT WON'T WORK! -->

-- AFTER 1096d15 :

Now we wanna display the image, so let's go the views/posts/index.php, and we're gonna add:
<div class="row">
	<div class="col-md-3">
	<!-- this is gonna pull the image name from the database -->
	<img src="<?php echo site_url(); ?>assets/images/posts/<?php echo $post['post_image']; ?>">
	</div>
	<div class="col-md-9">
We're gonna cut the previous content in the view and put it inside here so that the 9 column wraps it
	</div>
</div>

-- AFTER a524643

Let's create our comments table:

CREATE TABLE `ciblog`.`comments` (
	`id` INT NOT NULL AUTO_INCREMENT ,
	`post_id` INT NOT NULL ,
	`name` VARCHAR(255) NOT NULL ,
	`email` VARCHAR(255) NOT NULL ,
	`body` TEXT NOT NULL ,
	`created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ,
	PRIMARY KEY (`id`)
) ENGINE = InnoDB;

-- AFTER 5ca90bb

Let's create our `users` table:

CREATE TABLE `ciblog`.`users` (
	`id` INT NOT NULL AUTO_INCREMENT ,
	`name` VARCHAR(255) NOT NULL ,
	`zipcode` VARCHAR(255) NOT NULL ,
	`email` VARCHAR(255) NOT NULL ,
	`username` VARCHAR(255) NOT NULL ,
	`password` VARCHAR(255) NOT NULL ,
	`register_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ,
	PRIMARY KEY (`id`)
) ENGINE = InnoDB;

Now we want to go to the posts table and we need to make it so that the system knows what user added what post,
that way they can only edit and delete their own posts, so what we'll do is go to structure and then we're going
to go to after categoryid I want to put it right here, and this is going to be the user_id column.

ALTER TABLE `posts` ADD `user_id` INT NOT NULL AFTER `category_id` ;

Now our `posts`.`user_id` has ZEROS for all posts, and our db is all set and ready for code.

-- AFTER 9866ce8

Now, up to this point we haven't been working with any kind of messages so for intance after we submit a post we
haven't made it say you know your posts have been submitted, or anything like that. So what we can do is we can load
the session library and that has a function that we can use to create flash messages, so basically what that means is
we can set a message here and then redirect and have that caught on the other side of the redirect and then displayed.
Alright, we're also going to need the session library to actually handle the you know when we log in we need to store
that information somewhere and that's going to be in a session, so we want to load that library, we could do it inside
Users controller, but I want it loaded across the whole application so we're going to go to config/autoload.php and
we're gonna go to libraries and add:
$autoload['libraries'] = array('form_validation', 'session');

Now we can use sessions, it's as easy as that. So we'll close that up and then to set a message before we redirect,
we'll continue in controllers/Users.php, at (*)

-- AFTER da51800

The registration still doesn't work because we haven't load the user model that we created, we need to add it to the
$autoload['model'] array, like this:

$autoload['model'] = array('post_model', 'category_model', 'comment_model', 'user_model');


-- AFTER 395bc34

We'll prevent a user registering with a username that already exists in the database. To do that we'll add
our own custom validation rule, so let's go to:

Users controller, and set up a custom validation here (/\/\/\)
